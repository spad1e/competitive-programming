#include <bits/stdc++.h>
#include "robinhood.h"
#include "grader.cpp"
using namespace std;

const int maxN = 5e5 + 10;

int mx[maxN], sz[maxN];
bool mark[maxN];
vector<int> adj[maxN];

int find_sz(int i, int prt=-1) {
    sz[i] = 1;
    for (auto j : adj[i]) if (j != prt && !mark[j]) sz[i] += find_sz(j);
    return sz[i];
}

int find_centroid(int i, int m, int prt=-1) {
    for (auto j : adj[i]) if (j != prt && !mark[j] && sz[j] > m/2) return find_centroid(j);
    return i;
}

void decom(int x=0, int prt=-1) {
    int c = find_centroid(x, find_sz(x));
    mark[c] = 1;


}

void initialize(vector<int> A, int M) {
    int N = A.size();

}

int ask(int V) {

}

void add(int V) {

}
