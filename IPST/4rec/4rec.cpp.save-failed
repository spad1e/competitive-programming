#include <bits/stdc++.h>
#include <vector>
#include "grader.cpp"
#define ll long long
#define pb push_back
#define all(x) x.begin(), x.end()
#defien sz(x) x.size()
using namespace std;

const int maxN = 5e5 + 10;

int fw[maxN][2], cnt;
vector<int> X, Y, inX[maxN], mpY[maxN];

void update(int i, int val, int j) {for (; i < maxN; i += i&-i) fw[i][j] += val;}
int query(int i, int j) {int ret = 0; for (; i > 0; i -= i&-i) ret += fw[i][j]; return ret;}

ll find_rec(vector<vector<int>> Point, int P, int Q) {
    int N = Point.size();
    for (int i = 0; i < N; ++i) X.pb(Point[i][0]), inX[Point[i][0]].pb(Point[i][1]);
    for (int i = 0; i < N; ++i) Y.pb(Point[i][1]);
    sort(all(X)); unique(all(X));
    sort(all(Y)); unique(all(Y));
    for (int i = 0; i < sz(Y); ++i) mpY[Y[i]] = i+1;
    for (int i = 0; i < N; ++i) update(mpY[Point[i][1]], 1, 1);
    for (int i = 0; i < N; ++i) inX[Point[i][0]].pb(Point[i][1]);
    ll ans = 0;
    for (int i = 0; i < sz(X); ++i) {
        for (auto j : inX[X[i]]) update(mpY[j], -1, 1), update(mpY[j], 1, 0);
        int l, r, L1, L2, R1, R2;
        l = 0, r = sz(Y);
        while (l < r) {
            int mid = (l+r+1)/2;
            if (query(mid, 1) - (query(sz(Y), 0) - query(mid, 0)) >= -P) r = mid-1;
            else l = mid;
        }
        L1 = l;
        l = 0, r = sz(Y);
        while (l < r) {
            int mid = (l+r+1)/2;
            if (query(mid, 1) - (query(sz(Y), 0) - query(mid, 0)) > P) r = mid-1;
            else l = mid;
        }
        R1 = l;
        l = 0, r = sz(Y);
        while (l < r) {
            int mid = (l+r+1)/2;
            if (query(mid, 0) - (query(sz(Y), 1) - query(mid, 1)) >= -Q) r = mid-1;
            else l = mid;
        }
        L2 = l;
        l = 0, r = sz(Y);
        while (l < r) {
            int mid = (l+r+1)/2;
            if (query(mid, 0) - (query(sz(Y), 1) - query(mid, 1)) > Q) r = mid-1;
            else l = mid;
        }
        R2 = l;
        if (L2 < L1) swap(L1, L2), swap(R1, R2);
        if (L2 < R1) ans += min(R1, R2) - max(L1, L2);
    }
    return ans;
}
